// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  var inputUnits = {
    'sea_water_temperature': '°C',
    'sea_water_salinity': 'psu',
    'sea_water_electrical_conductivity': 'ms cm-1',
    'depth': 'm',
    'speed': 'm s-1',
    'wind_speed': 'm s-1',
    'wind_speed_mean': 'm s-1',
    'air_pressure': 'hPa',
    'humidity': '%',
    'air_temperature': '°C',    
    'sun_radiation': 'W m^2-1'    
  }

  Dashing.VesselInfo = (function(_super) {
    __extends(VesselInfo, _super);

    function VesselInfo() {
      this.initialData = __bind(this.initialData, this);  
      this.setItem = __bind(this.setItem, this);      
      _ref = VesselInfo.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VesselInfo.prototype.ready = function() {
      $(this.node).addClass(this.get('id'));            
    };

    VesselInfo.prototype.onData = function(data) {
      var oldItem = {};
      if (this.get('item') != undefined)        
        oldItem = this.get('item');

      var item = {};
      var current_value = '';
      item.display_name = this.get('title');
      item.standard_name = this.get('id');
      item.current = {};
      item.current.time = data.time;
      if (this.get('id') == 'position'){
        item.current.value = data.long + ' , ' + data.lat;
      }else{
        item.current.value = data[this.get('id')];
        item.inputUnits = inputUnits[this.get('id')];
      }
      item.min = {};

      if (!oldItem.min || parseFloat(oldItem.min.value) > parseFloat(item.current.value)){
        item.min.value = item.current.value;
        item.min.time = data.time;
      }else{
        item.min.value = oldItem.min.value;
        item.min.time = oldItem.min.time;        
      }

      item.max = {};
      if (!oldItem.max || parseFloat(oldItem.max.value) < parseFloat(item.current.value)){
        item.max.value = item.current.value;
        item.max.time = data.time;
      }else{
        item.max.value = oldItem.max.value;
        item.max.time = oldItem.max.time;        
      }

      this.set('item',item);      
    };

    VesselInfo.prototype.initialData = function(data) {
      var item = {};

      item.display_name = this.get('title');
      item.standard_name = this.get('id');
      item.current = {};
      item.min = {};
      item.max = {};

      var length = data.time.length;
      item.current.time = data.time[length - 1];
      if (this.get('id') == 'position'){
        item.current.value = data['long'][length - 1] + ' , ' + data['lat'][length - 1]; 
      }else{        
        item.current.value = data[this.get('id')][length - 1];        
        item.inputUnits = inputUnits[this.get('id')];
        item.min.value = Math.min.apply(Math, data[this.get('id')] );        
        item.max.value = Math.max.apply(Math, data[this.get('id')] );
        // TODO: get time of min and max value. Indexof...
        index_min = data[this.get('id')].indexOf(item.min.value.toString());
        item.min.time = data.time[index_min];
        index_max = data[this.get('id')].indexOf(item.max.value.toString());
        item.max.time = data.time[index_max];
      }

      this.set('item',item);            
    };


    return VesselInfo;

  })(Dashing.Widget);

}).call(this);
