// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me) {
      return function() {
        return fn.apply(me, arguments);
      };
    },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
      }

      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    };

  var inputUnits = {
    'sea_water_temperature': '°C',
    'sea_water_salinity': 'psu',
    'sea_water_electrical_conductivity': 'ms cm-1',
    'fluor': 'V',
    'depth': 'm',
    'speed': 'kn',
    'wind_speed': 'kn',
    'wind_speed_mean': 'm s-1',
    'air_pressure': 'hPa',
    'humidity': '%',
    'air_temperature': '°C',
    'sun_radiation': 'W m^2-1'
  };

  var decimals = {
    'sea_water_temperature': 1,
    'sea_water_salinity': 1,
    'sea_water_electrical_conductivity': 1,
    'fluor': 3,
    'depth': 2,
    'speed': 1,
    'wind_speed': 1,
    'wind_speed_mean': 1,
    'air_pressure': 0,
    'humidity': 0,
    'air_temperature': 1,
    'sun_radiation': 1
  };


  var conversions = {
    'wind_speed': function (value){
      return (value / 1852) * 3600;
    }
  };

  Dashing.VesselChart = (function(_super) {
    __extends(VesselChart, _super);

    function VesselChart() {
      this.initialData = __bind(this.initialData, this);
      _ref = VesselChart.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VesselChart.prototype.ready = function() {
      $(this.node).addClass(this.get('id'));
    };

    VesselChart.prototype.onData = function(data) {
      if (data.time){
        var variables = this.get('variables').split(",");
        var chart = $(this.node).highcharts();
        var d = new Date();
        var x = d.parseFormat(data.time, 'dd-mm-yyyy HH:MM:ss').getTime();
        for (var v = 0, l = variables.length; v < l; v++) {
          var standardName = variables[v];
          var serie = chart.series[v];
          var y = parseFloat(data[standardName]);
          if (standardName in conversions){
            y = conversions[standardName].call(this, y);
          }
          if (serie.xData[serie.xData.length - 1] != x) {
            serie.addPoint([x, y], true, true);
          }
        }
      }
    };

    VesselChart.prototype.initialData = function(data) {
      var variables = this.get('variables').split(",");
      var chartTitle = this.get('title');

      $(this.node).highcharts('StockChart', {
        scrollbar: {
          enabled: false
        },
        navigator: {
          enabled: false
        },
        title: {
          text: chartTitle
        },
        global: {
          useUTC: false
        },
        series: (function() {
          var series = [];
          for (var v = 0, l = variables.length; v < l; v++) {
            var standardName = variables[v];
            var serie = {
              name: standardName,
              yAxis: v,
              tooltip: {
                valueSuffix: " " + inputUnits[standardName],
                valueDecimals: decimals[standardName],
              },
            };
            var variable_data = data[standardName];
            var length = variable_data.length;
            serie.data = [];
            var d = new Date();
            for (var i = 0; i < length; i++) {
              var value = parseFloat(variable_data[i]);
              if (standardName in conversions){
                value = conversions[standardName].call(this, value);
              }
              serie.data.push([d.parseFormat(data.time[i], 'dd-mm-yyyy HH:MM:ss').getTime(), value]);
            }
            series.push(serie);
          }
          return series;
        })(),
        yAxis: (function() {
          var axis_list = [];
          for (var v = 0, l = variables.length; v < l; v++) {
            var standardName = variables[v];
            var even = (v % 2 !== 0);
            var axis = {
              title: {
                text: standardName,
                style: {
                  color: Highcharts.getOptions().colors[v]
                },
              },
              labels: {
                format: '{value}' + inputUnits[standardName],
                style: {
                  color: Highcharts.getOptions().colors[v]
                }
              },
              opposite: even,
            };
            axis_list.push(axis);
          }
          return axis_list;
        })(),
        rangeSelector: {
          enabled: false
        }
      });
    };


    return VesselChart;

  })(Dashing.Widget);

}).call(this);